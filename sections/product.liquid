<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@10/swiper-bundle.min.css">

<div class="section grid sm:grid-cols-2 items-start gap-8 [&>*]:min-w-0">
  <figure>
    <div class="swiper">
      <div class="swiper-wrapper">
        {%- for media in product.media -%}
          {%- case media.media_type -%}
            {%- when 'image' -%}
              {%- assign image = product.images[forloop.index0] -%}

              <div class="swiper-slide" data-variant-id="{{ image.variants[0].id }}">
                {{ image
                  | image_url: width: 800, height: 800
                  | image_tag: class: 'w-full object-cover', loading: 'lazy'
                }}
              </div>

          {%- endcase -%}
        {%- endfor -%}
      </div>
    </div>
  </figure>

  {% form 'product', product, class: 'grid gap-2' %}
    {%- for block in section.blocks -%}
      {%- case block.type -%}
        {%- when 'title' -%}
          <h1 class="h1">{{ product.title }}</h1>

        {%- when 'vendor' -%}
          <p class="technical text-xs">{{ product.vendor }}</p>

        {%- when 'price' -%}
          {%- render 'price' -%}

        {%- when 'variant-selector' -%}
          {% render 'variant-selector' %}

        {%- when 'quantity-selector' -%}
          <label>
            <span class="technical text-xs">Quantity</span>
            <input class="text-center" name="quantity" value="1" min="1" type="number" required />
          </label>

        {%- when 'buy-button' -%}
          <p>
            <button class="action" type="submit">
              {{ block.settings.text | default: 'Add to cart' | escape }}
              {%- if block.settings.inventory_text != blank -%}
                {% render 'inventory', text: block.settings.inventory_text %}
              {%- endif -%}
            </button>
          </p>

        {%- when 'inventory' -%}
          {%- liquid
            if product.has_only_default_variant
              assign p = product
            else
              assign p = product.selected_or_first_available_variant
            endif
          -%}

          <div
            {% if block.settings.enable_threshold %}
              data-inventory-threshold="{{ block.settings.threshold }}"
              {% if p.inventory_quantity > block.settings.threshold %}hidden{% endif %}
            {% endif %}
          >
            {% render 'inventory', text: block.settings.text %}
          </div>

        {%- when 'richtext' -%}
          <div class="rte">{{ block.settings.richtext }}</div>

        {%- when 'custom-html' -%}
          <div>{{ block.settings.html }}</div>

        {%- when 'divider' -%}
          <hr class="my-2">

      {%- endcase -%}
    {%- endfor -%}
  {% endform %}
</div>

<script type="module" defer>
  import Swiper from 'https://cdn.jsdelivr.net/npm/swiper@10/swiper-bundle.min.mjs'

  const { format: formatMoney } = new Intl.NumberFormat('{{ request.locale.iso_code }}', {
    style: 'currency',
    currency: '{{ shop.currency }}',
    minimumFractionDigits: 2,
    maximumFractionDigits: 2
  })

  const swiper = new Swiper('#shopify-section-{{ section.id }} .swiper', {

  })

  const productForm = document.querySelector('#shopify-section-{{ section.id }} form')
  const variantSelector = productForm.querySelector('[name="id"]')

  if (!!variantSelector) {
    // initialize options (populate on page load)
    const selectedOptions = variantSelector?.selectedOptions[0].dataset
    for (const [key, value] of Object.entries(selectedOptions)) {
      const option = productForm.querySelector(`[name="${ key }"][value="${ value }"]`)
      if (!!option) option.checked = true
    }

    productForm.addEventListener('input', () => {
      const formData = new FormData(productForm)

      const selector = Array.from(formData.keys())?.reduce((acc, key) => {
        if (/option[123]/g.test(key)) {
          acc += `[data-${ key }="${ formData.get(key) }"]`
        }
        return acc
      }, 'option')

      const newValue = productForm.querySelector(selector)?.value
      if (!!newValue) {
        // update <select name="id">
        variantSelector.value = newValue

        // update [data-*]
        const [selectedOption] = variantSelector.selectedOptions
        const selected = JSON.parse(selectedOption.innerHTML)

        productForm.querySelectorAll('[data-price]').forEach(elem => elem.textContent = formatMoney(selected.price / 100))

        productForm.querySelectorAll('[data-compare-at-price]').forEach(elem => {
          elem.textContent = formatMoney(selected.compare_at_price / 100)

          // toggle data-compare-at-price
          if (selected.price < selected.compare_at_price) {
            elem.removeAttribute('hidden')
          } else {
            elem.setAttribute('hidden', '')
          }
        })

        productForm.querySelectorAll('[data-inventory-quantity]').forEach(elem => {
          elem.textContent = selectedOption.dataset.inventory

          // toggle depending on threshold
          const wrapper = elem.closest('[data-inventory-threshold]')
          if (wrapper?.dataset.inventoryThreshold) {
            if (selectedOption.dataset.inventory > Number(wrapper.dataset.inventoryThreshold)) {
              wrapper.setAttribute('hidden', '')
            } else {
              wrapper.removeAttribute('hidden')
            }
          }
        })

        // update swiper
        const variantImage = document.querySelector(`[data-variant-id="${ newValue }"]`)
        if (!!variantImage) {
          const index = Array.from(variantImage.parentNode.children).indexOf(variantImage)
          swiper.slideTo(index)
        }
      }
    })
  }
</script>

{% schema %}
{
  "name": "Product",
  "tag": "article",
  "class": "section-product",
  "limit": 1,
  "settings": [

  ],
  "blocks": [
    {
      "name": "Title",
      "type": "title",
      "limit": 1,
      "settings": [

      ]
    },
    {
      "name": "Vendor",
      "type": "vendor",
      "limit": 1,
      "settings": [

      ]
    },
    {
      "name": "Price",
      "type": "price",
      "limit": 1,
      "settings": [

      ]
    },
    {
      "name": "Variant selector",
      "type": "variant-selector",
      "limit": 1,
      "settings": [

      ]
    },
    {
      "name": "Quantity selector",
      "type": "quantity-selector",
      "limit": 1,
      "settings": [

      ]
    },
    {
      "name": "Buy button",
      "type": "buy-button",
      "settings": [
        {
          "type": "text",
          "id": "text",
          "label": "Text",
          "placeholder": "Add to cart"
        },
        {
          "type": "text",
          "id": "inventory_text",
          "label": "Inventory text",
          "info": "\"#\" will be replaced with the actual inventory quantity. Leave blank to hide.",
          "default": "(# left)",
          "placeholder": "(# left)"
        }
      ]
    },
    {
      "name": "Inventory",
      "type": "inventory",
      "settings": [
        {
          "type": "text",
          "id": "text",
          "label": "Text",
          "info": "\"#\" will be replaced with the actual inventory quantity",
          "default": "Only # left in stock!",
          "placeholder": "Only # left in stock!"
        },
        {
          "type": "checkbox",
          "id": "enable_threshold",
          "label": "Enable threshold",
          "default": true,
          "info": "Only show when inventory is below the threshold"
        },
        {
          "type": "number",
          "id": "threshold",
          "label": "Threshold",
          "default": 10
        }
      ]
    },
    {
      "name": "Richtext",
      "type": "richtext",
      "settings": [
        {
          "type": "richtext",
          "id": "richtext",
          "label": "Richtext"
        }
      ]
    },
    {
      "name": "Custom HTML",
      "type": "custom-html",
      "settings": [
        {
          "type": "html",
          "id": "html",
          "label": "HTML"
        }
      ]
    },
    {
      "name": "Divider",
      "type": "divider",
      "settings": [

      ]
    }
  ]
}
{% endschema %}
